@page "/"
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<style>
    .progress-wrapper-rotate {
        margin-right:auto;
        margin-left:auto;
        position: relative;
        transform: rotate(-90deg);
        border-left:solid 2px white;
    }

    .progress-rotate {
        width: 60vh;
        height: 3.5rem;
        position: relative;
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
        margin: 4rem 0 4rem 0;
        overflow: initial;
    }
    .progress-rotate:after {    
        content: attr(data-label);
        position: absolute;
        transform: translate(-50%,50%) rotate(84deg);
        left: -5%;
        font-size: 1.2rem;
        color: #ffffff;
    }
    .round-item {
        display: inline-block;
        min-width: 30vw;
        min-height: 50vh;
        top: 50%;
        transform: translateY(-50%);
    }
    .progress-bar {
        transition: none;
    }
    #card-ranking {
        top:-20vh;
    }
</style>
<div id="blank"></div>
<ol id="scoreBars"><li style="display:none !important"></li></ol>
<div id="vertical-score-bars" class="card round-item float-left bg-transparent" style="display:none">
    <div class="card-body">
        <div id="progress-bar-container" class="progress-wrapper-rotate">
            <div class="progress progress-rotate" data-label>
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary">第二轮</div>
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning">第一轮</div>
            </div>
            <div class="progress progress-rotate" data-label>
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary">第二轮</div>
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning">第一轮</div>
            </div>
            <div class="progress progress-rotate" data-label>
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary">第二轮</div>
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning">第一轮</div>
            </div>
            <div class="progress progress-rotate" data-label>
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary">第二轮</div>
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning">第一轮</div>
            </div>
        </div>
    </div>
</div>
<div id="card-ranking" class="card round-item float-right" style="display:none">
    <div class="card-body">
        <div class="card-title"><h5 class="card-text">排名</h5></div>
        <table id="ranking" class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">姓名</th>
                    <th scope="col">#</th>
                    <th scope="col">姓名</th>
                </tr>
            </thead>
            <tbody id="ranking-body">
                <tr>
                    <th scope="col">1</th>
                    <td scope="col">xxxxx</td>
                    <th scope="col">9</th>
                    <td scope="col">xxxxx</td>
                </tr>
                <tr>
                    <th scope="col">2</th>
                    <td scope="col">xxxxx</td>
                    <th scope="col">10</th>
                    <td scope="col">xxxxx</td>
                </tr>
                <tr>
                    <th scope="col">3</th>
                    <td scope="col">xxxxx</td>
                    <th scope="col">11</th>
                    <td scope="col">xxxxx</td>
                </tr>
                <tr>
                    <th scope="col">4</th>
                    <td scope="col">xxxxx</td>
                    <th scope="col">12</th>
                    <td scope="col">xxxxx</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
<div id="trash" style="display:none!important"></div>
@Html.AntiForgeryToken()
<div id="modal-add" class="modal fade">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">添加信息</div>
                <button class="close" data-dismiss="modal"><span>&times;</span></button>
            </div>
            <div class="modal-body">
                <form id="form" autocomplete="off">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text">ID</div>
                        </div>
                        <input type="text" id="ID" name="StringID" class="form-control" placeholder="ID" />
                        <div class="input-group-append">
                            <div class="input-group-text bg-info text-white">名字</div>
                        </div>
                    </div>
                    <br />
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text">分数</div>
                        </div>
                        <input type="text" id="score" name="StringScore" class="form-control" placeholder="分数" />
                    </div>
                    <br />
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text">次序</div>
                        </div>
                        <input type="text" id="sequence" name="StringSequence" class="form-control" placeholder="次序" />
                    </div>
                    <br />
                    <div class="input-group">
                        <select id="round" name="Round" class="form-control">
                            <option value="1">第一轮</option>
                            <option value="2">第二轮</option>
                        </select>
                    </div>
                    <br />
                    <div class="input-group float-right">
                        <select id="groupId" name="GroupId" class="form-control">
                            <option value="1">第一组</option>
                            <option value="2">第二组</option>
                            <option value="3">第三组</option>
                            <option value="4">第四组</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="submit" class="submit btn btn-success" type="submit">提交</button>
                <button class="btn btn-light" data-dismiss="modal">返回</button>
            </div>
        </div>
    </div>
</div>
<div id="modal-scores" class="modal fade">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">查询信息</div>
                <button class="close" data-dismiss="modal"><span>&times;</span></button>
            </div>
            <div class="modal-body">
                <table id="table-singers" class="table">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Sequence</th>
                            <th scope="col">Name</th>
                            <th scope="col">Group Id</th>
                            <th scope="col">Score 1</th>
                            <th scope="col">Score 2</th>
                        </tr>
                    </thead>
                    @foreach (Singer singer in Model.Singers)
                    {
                    <tr>
                        <th scope="row">@singer.ID</th>
                        <td>@singer.Sequence</td>
                        <td>@singer.Name</td>
                        <td>@singer.GroupId</td>
                        <td>@singer.Scores[0]</td>
                        <td>@singer.Scores[1]</td>
                    </tr>
                    }
                </table>
            </div>
            <div class="modal-footer">
                <button id="btn-refresh" class="submit btn btn-success">刷新</button>
                <button class="btn btn-light" data-dismiss="modal">返回</button>
            </div>
        </div>
    </div>
</div>
@section Scripts
{
    <script>
        //类型定义
        class ScoreBar {
            constructor(name, score, sequence) {
                this.name = name;
                this.score = score;
                this.sequence = sequence;
                //创建ScoreBar对象对应的<li>元素
                this.target = $("<li></li>").css({ "display": "none" });
                //this.target = $("<div></div>").addClass("progress").append($("<div></div>").addClass("progress-bar").css({"width":"10%"})).css({ "display": "none" });
                //将新建的<li>加入scoreBars中
                var targetBefore = $("#scoreBars > li").last();
                targetBefore.after(this.target);
            }

            /**
                * 显示柱形
                * */
            showBar(callback) {
                this.target.fadeIn();
                //显示后需要运行垂直自适应fitBars
                fitBars($("#scoreBars"), () => { });
                //分数自动增长
                this.growTo(800 * (this.score / 100), true, 50 * (this.score), callback);
            }

            destroy(callback) {
                this.growTo(2000, false, 350, () => {
                    this.target.animate({ "margin-left": 2000 }, 1000, "swing", () => {
                        this.target.fadeOut(200, () => {
                            fitBars($("#scoreBars"), callback);
                        });
                    });
                });
            }

            /*
                * 使得柱形增长到指定宽度
                * @@param width 柱形最终宽度
                */
            growTo(width, name, duration, callback) {
                this.target.animate({ "width": width }, duration, "swing", () => {
                    if (name) {
                        var nameBar = $("<span></span>").css({ "display": "none" }).text(this.name);
                        this.target.append(nameBar.fadeIn(250, callback));
                    }
                    else
                        callback();
                });
            };

            toString() {
                return this.name + ", " + this.score + " [" + this.target.index() + "]";
            }
        }

        //初始化
        var bars = new Array();
        var pointer = 0;
        var groupPointer = 0;
        var barDisplay = new Array();
        //数组的数组
        var groupedSingers = new Array();
        var singerRankList = new Array();
        const roundConst = [5];
        var isInserting = false;
        var $temp = $("<div></div>").html("@Newtonsoft.Json.JsonConvert.SerializeObject(Model.Singers)");
        var singers = $.parseJSON($temp.text());
        $(document).ready(() => {
            console.log("@ViewData["error"]");
            //分数条垂直居中
            fitBars($("#scoreBars"), () => {
                //回调隐藏遮罩
                $("#blank").fadeOut();
            });
        });
        //li 柱形交换位置(indexA,indexB从1开始)
        function swap(indexA, indexB, callback) {
            //indexB必须大于indexA
            if (indexA > indexB) {
                var temp = indexA;
                indexA = indexB;
                indexB = temp;
            }
            if (indexA == indexB || indexA >= $("#scoreBars > li").length || indexB >= $("#scoreBars > li").length) {
                callback(indexA);
                return "failed";
            }
            //计算调换位置需要的距离
            var distance = (parseFloat($("#scoreBars > li").css("height")) + parseFloat($("#scoreBars > li").css("margin-top")) + parseFloat($("#scoreBars > li").css("border-width")) * 2) * (indexA - indexB);
            //通过更改top移动柱形
            bars[indexA - 1].target.stop(true, true).animate({ "top": -distance + "px" }, { easing: "swing", queue: false, duration: 500 });
            bars[indexB - 1].target.stop(true, true).animate({ "top": distance + "px" }, 500,"swing", () => {
                //柱形移动到目标地点时更改<li>元素在<ol>中的位置，同时将top重置为0px
                $("#scoreBars > li").eq(indexB).after(bars[indexA - 1].target.css({ "top": "0px" }));
                $("#scoreBars > li").eq(indexA).before(bars[indexB - 1].target.css({ "top": "0px" }));
                //将bars数组中的ScoreBar实例调换位置
                var temp = bars[indexA - 1];
                bars[indexA - 1] = bars[indexB - 1];
                bars[indexB - 1] = temp;
                //调用回调
                callback(indexA - 1);
            });
            return 1;
        }
        //表单验证
        var scoreCheck = function () {
            var score = parseFloat($("#score").val());
            if (!isNaN(score))
                $("#score").val(score);
            if (isNaN(score) || score > 100 || score < 0) {
                $("#score").css({ "border-color": "#ff0000" });
                return false;
            }
            else {
                $("#score").css({ "border-color": "#d9d9d9" });
                return true;
            }
        };
        var IDCheck = function () {
            var ID = parseInt($("#ID").val());
            if (!isNaN(ID))
                $("#ID").val(ID);
            var singer = null;
            singers.forEach(ele => {
                if (ele.ID == ID)
                    singer = ele;
            });
            if (isNaN(ID) || ID > singers.length || ID < 1 || singer == null) {
                $("#ID").next().children().eq(0).text("名字");
                $("#ID").css({ "border-color": "#ff0000" });
                return false;
            }
            else {
                $("#ID").css({ "border-color": "#d9d9d9" });

                $("#ID").next().children().eq(0).text(singer.Name);
                return true;
            }
        };

        $("#ID").keyup(e => {
            var ID = parseInt($("#ID").val());
            if (!isNaN(ID))
                switch (e.keyCode) {
                    //上
                    case 38:
                    case 104:
                            $("#ID").val((ID + 1 <= singers.length)?(ID + 1):1);
                        break;
                    //下
                    case 40:
                    case 98:
                            $("#ID").val((ID - 1 > 0) ? (ID - 1) : (singers.length));
                        break;
                }
            var singer = null;
            singers.forEach(ele => {
                console.log(ele.ID, ID, ele.Name);
                if (ele.ID == ID)
                    singer = ele;
            });
            if (ID > 0 && ID < singers.length && singer != null) {
                $("#score").val(singer.Scores[$("#round").val()]);
                $("#sequence").val(singer.Sequence);
                $("#groupId").val(singer.GroupId);
            }
            IDCheck();
        });

        $("#score").change(scoreCheck);

        $("#submit").click(function () {
            $("#form").submit();
        });
        $("#form input").click(e => {
            if (e.keyCode == 32)
                $("#form").submit();
        });
        //ajax 存储表单
        $("#form").submit(e => {
            e.preventDefault();
            if (true || $("#form").data("isSubmitting") == null || !$("#form").data("isSubmitting")) {
                //表单检验
                if (!IDCheck() || !scoreCheck()) return;
                var formData = new FormData(document.getElementById("form"));
                $.post({
                    url: "?handler=AlterSinger",
                    data: formData,
                    contentType: false,
                    processData: false,
                    dataType: "json",
                    beforeSend: (xhr) => {
                        xhr.setRequestHeader("RequestVerificationToken",
                            $("input:hidden[name=__RequestVerificationToken]").val());
                    },
                    success: (data) => {
                        if (data == 1) {
                            $("#form").find("input[name='StringScore']").val("");
                            $("#form").find("select[name='Round']").children().eq(0).attr({ "selected": "selected" });
                            $("#btn-refresh").click();
                        }
                        else {
                            alert("更新失败");
                        }
                    },
                    error: (error) => {
                        console.log("发生错误" + error);
                    },
                    complete: () => {
                        $("#form").data("isSubmitting", false);
                    }
                });
            }
        });
        $("#btn-refresh").click(function (){
            $.get({
                url: "?handler=Singers",
                dataType: "json",
                beforeSend: (xhr) => {
                    xhr.setRequestHeader("RequestVerificationToken",
                        $("input:hidden[name=__RequestVerificationToken]").val());
                },
                success: (data) => {
                    if (data.length > 0) {
                        $("#table-singers > tbody > tr").remove();
                        singers = $.parseJSON(data);
                        singers.forEach(singer => {
                            $(`<th scope='row'>${singer.ID}</th>` +
                                `<td>${singer.Sequence}</td>` +
                                `<td>${singer.Name}</td>` +
                                `<td>${singer.GroupId}</td>` +
                                `<td>${singer.Scores[0]}</td>` +
                                `<td>${singer.Scores[1]}</td>`).appendTo($("<tr></tr>").appendTo("#table-singers"));
                        });
                    }
                    else
                        console.log("error:",data);
                },
                complete: () => {
                    $("#form").data("isSubmitting", false);
                }
            });
        });

        //ol ScoreBars滑动居中
        function fitBars(target, callback) {
            var top = (window.innerHeight - parseFloat(target.css("height"))) / 2;
            if (top != parseFloat(target.css("height")))
                target.animate({
                    "top": top
                }, "normal", callback);
        }

        //获取下一个歌手
        function getNextSinger() {
            if (pointer + 1 > singers.length)
                pointer = 0;
            return singers[pointer++];
        }

        function insertSinger(times) {
            if (isInserting) return;
            //if (singer == null || singer == undefined) return;
            if (barDisplay.length + 1 >= roundConst[0]) return;
            var singer = getNextSinger();
            isInserting = true;
            lastIndex = (barDisplay.length < roundConst[0]) ? barDisplay.length : (roundConst[0] - 1);
            bars[lastIndex] = new ScoreBar(singer.Name, singer.Scores[0],singer.Sequence);
            //显示占位分数柱
            bars[lastIndex].showBar(() => {
                //将循环的起始点设定为barDisplay的长度，即最后一行分数柱之后
                var i = lastIndex;
                //使用递归回调将分数柱插入
                var cb = n => {
                    if (barDisplay[n - 1] != null && barDisplay[n - 1].Scores[0] < singer.Scores[0])
                        swap(n, n + 1, cb);
                    else {
                        var i = lastIndex;
                        var pos = n;
                        for (; i > pos; i--) {
                            barDisplay[i] = barDisplay[i - 1];
                        }
                        //将singer插入barDisplay的正确位置
                        barDisplay[pos] = singer;
                        isInserting = false;
                        if (--times <= 0)
                            return;
                        else
                            insertSinger(times);
                    }
                };
                cb(i);
            });
        }
        //将传入歌手数组按groupid整理为四组，由高到低排列
        function sortAndDivideSingers(singersList) {
            var stack = new Array(4);
            for (var i = 0; i < 4; i++) {
                groupedSingers[i] = new Array();
                stack[i] = 0;
            }
            var tempSortedSingers = JSON.parse(JSON.stringify(singersList));
            for (var i = 0; i < tempSortedSingers.length; i++) {
                var max = tempSortedSingers[i];
                for (var n = i + 1; n < tempSortedSingers.length; n++)
                    if (tempSortedSingers[n] != null && tempSortedSingers[n].Scores[0] * 0.8 + tempSortedSingers[n].Scores[1] * 0.2 > max.Scores[0] * 0.8 + max.Scores[1] * 0.2) {
                        max = tempSortedSingers[n];
                    }
                tempSortedSingers[tempSortedSingers.indexOf(max)] = tempSortedSingers[i];
                tempSortedSingers[i] = max;
            }
            console.log(groupedSingers);
            console.log("stack", stack);
            tempSortedSingers.forEach(singer => {
                groupedSingers[stack[singer.GroupId - 1]++].push(singer);
            });
            return groupedSingers;
        }
        var roundkey = 0;
        var ishid = false;
        //测试函数 Q键生成分数柱
        $(window).keydown(e => {
            switch (e.keyCode) {
                //Q
                case 81:
                    $("#scorebars").appendTo("#trash").fadeOut();
                    $(".progress").find(".progress-bar").animate({ "width": "10%" },150);
                    $(".progress").attr("data-label", "");
                    sortAndDivideSingers(singers);
                    break;
                //D
                case 68:
                    sortAndDivideSingers(singers);
                    //$("#card-ranking").fadeIn(200);
                    $("#vertical-score-bars").fadeIn(200, function () {
                        var aa = 0;
                        var curSingers = new Array();
                        if (groupPointer == 4)
                            groupPointer = 0;
                        for (var i = 0; i < 4; i++) {
                            $(".progress").eq(i).attr("data-label", groupedSingers[groupPointer][i].Name);
                            var score = groupedSingers[groupPointer][i].Scores[0] * 0.8;
                            $(".progress").eq(i).find(".bg-primary").eq(0).data("i", i).animate({ "width": score / 2 + "%" }, score * 50 + 200, function () {
                                var i = $(this).data("i");
                                var score = groupedSingers[groupPointer-1][i].Scores[1] * 0.2;
                                $(this).next().animate({ "width": score / 2 + "%" }, score * 50 + 200);
                            });
                            curSingers.push(groupedSingers[groupPointer][i]);
                            curSingers.sort((a, b) => {
                                return a.Scores[0] * 0.8 + a.Scores[1] *0.2> b.Scores[0]*0.8 + b.Scores[1]*0.2;
                            });
                        }
                        curSingers.forEach(singer => {
                            var inserted = false;
                            singerRankList.forEach((rankSinger, index) => {
                                if (!inserted && rankSinger.Scores[0] * 0.8 + rankSinger.Scores[1] * 0.2 < singer.Scores[0] * 0.8 + singer.Scores[1]* 0.2){
                                    singerRankList.splice(index, 0, singer);
                                    inserted = true;
                                }
                            });
                            if (!inserted)
                                singerRankList.push(singer);
                        });
                        $("#ranking-body").find("tr").remove();
                        var i = 0
                        while (i < 8) {
                            if(i < singerRankList.length)
                                var str = `<th scope='col'>${i + 1}</th><td scope='col'>${singerRankList[i].Name}</td>`;
                            else
                                var str = `<th scope='col'>${i + 1}</th><td scope='col'></td>`;
                            if (i + 8 < singerRankList.length) {
                                str += `<th scope='col'>${i + 9}</th><td scope='col'>${singerRankList[i + 8].Name}</td>`;
                            }
                            else {
                                str +=`<th scope='col'>${i + 9}</th><td scope='col'></td>`;
                            }
                            $(str).appendTo($("<tr></tr>").appendTo("#ranking-body"));
                            i++;
                        }
                        groupPointer++;
                    });
                    break;
                //S
                case 83:
                    if (!isInserting && pointer % 4 == 0) {
                        bars.forEach( bar => {
                            bar.target.fadeOut(100, function () {
                                $(this).appendTo("#trash");
                            });
                        });
                        bars = new Array();
                        barDisplay = new Array();
                    }
                    break;
                //W 使用第二轮视图并且出分
                case 87:
                    if (pointer != 16 && singers.length > barDisplay.length || singers.length == roundConst[0]) {
                        insertSinger(4);
                    }
                    break;
                //空格自动填充
                case 32:
                    if (ishid) {
                        $("#card-ranking").fadeIn(400,()=>ishid = false);
                        
                    }
                    else {
                        $("#card-ranking").fadeOut(400,()=>ishid = true);
                    }
                    //$("#modal-scores").modal("toggle");
                    break;
                //添加歌手
                case 27:
                    $("#modal-add").modal("toggle");
                    break;
            }
        });
    </script>
}
